## Configuration of Github Actions CI for retdec-r2plugin.

name: retdec-r2plugin CI

on:
    push:
        branches:
            - master   # Activate on push on master.
            - 'test-*' # Activate on branch with prefix test.

    pull_request:
        branches:
            - master # Activate on pull request.

jobs:
    ## Prepares specific radare2 version for later usage.
    ## Version is specified in separate `radare2.version` file.
    ## Build of radare2 is cached -> build of radare2 on each
    ## change in master is not required. Each change of
    ## the file `radare2.version` triggers new build of radare2.
    prepare-radare2:
        runs-on: ${{ matrix.os }}

        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]

        steps:
            # File is located in the repoitory -> content is required.
            - uses: actions/checkout@v2

            - name: Create Build Directory
              run: mkdir -p build

            ## Specification of Radare2 cache.
            ## Hash of the file `radare2.version` is incorporated in cache name.
            ## If the content of `radare2.version` changes then different
            ## name is checked and previous cache is not hit.
            - name: Check/Create Cache of Radare2
              id: radare2-cache
              uses: actions/cache@v1
              env:
                  cache-name: radare2-chb
              with:
                  path: build/radare2
                  key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/radare2.version') }}

            - name: Clone Radare2 Repository
              if: steps.radare2-cache.outputs.cache-hit != 'true'
              run: |
                    git clone https://github.com/radareorg/radare2 build/radare2
                    cp $(git ls-files '**/radare2.version') build/

            - name: Checkout Specified Version of Radare2
              if: steps.radare2-cache.outputs.cache-hit != 'true'
              run: git checkout $(cat ../radare2.version)
              working-directory: build/radare2

            - name: Run Configuration Script
              if: (steps.radare2-cache.outputs.cache-hit != 'true')
                        && (matrix.os != 'windows-latest')
              run: ./configure --prefix=${PWD}
              working-directory: build/radare2

            - name: Build Radare2 on Windows
              if: (steps.radare2-cache.outputs.cache-hit != 'true' )
                        && (matrix.os == 'windows-latest')
              run: |
                    pip install meson
                    call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
                    meson build --buildtype debug --backend vs2019 --prefix %cd%
                    msbuild build\radare2.sln /p:Configuration=Debug /m
                    meson install -C build --no-rebuild
              shell: cmd
              working-directory: build/radare2

            - name: Build Radare2 on Ubuntu
              if: (steps.radare2-cache.outputs.cache-hit != 'true' )
                        && (matrix.os == 'ubuntu-latest')
              run: make -j $(nproc) && make install
              working-directory: build/radare2

            - name: Build Radare2 on macOS
              if: (steps.radare2-cache.outputs.cache-hit != 'true')
                        && (matrix.os == 'macos-latest')
              run: make -j $(sysctl -n hw.ncpu) && make install
              working-directory: build/radare2

    ## Prepares RetDec Regression Tests Framework.
    ## Creates cache of virtual environment to be used in testing. Hash of content
    ## of file `requirements.txt` is prepended to the name of cache so that
    ## virtual environment is rebuilt in case of new dependecy is added.
    prepare-retdec-framework:
        runs-on: ${{ matrix.os }}

        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]

        steps:
            - name: Create Build Directory
              run: mkdir -p build

            - name: Clone RetDec RT Framework
              run: git clone https://github.com/avast/retdec-regression-tests-framework
              working-directory: build    

            - name: Create/Check Cache of RetDec RT Framework Virtual Environment
              id: retdec-fw-cache
              uses: actions/cache@v1
              env:
                  cache-name: retdec-test-fw-cache
              with:
                  path: build/retdec-regression-tests-framework/.venv
                  key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/requirements.txt') }}

            - name: Install Missing Packages on Ubuntu
              if: steps.retdec-fw-cache.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest'
              run: |
                    sudo apt-get update
                    sudo apt-get install python3-venv

            - name: Install virtualenv on Windows
              if: matrix.os == 'windows-latest'
              run: python -m pip install virtualenv

            - name: Create Virtual Environemnt
              if: steps.retdec-fw-cache.outputs.cache-hit != 'true' && matrix.os != 'windows-latest'
              run: python3 -m venv .venv
              working-directory: build/retdec-regression-tests-framework

            - name: Create Virtual Environemnt
              if: steps.retdec-fw-cache.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
              run: python -m venv .venv
              working-directory: build/retdec-regression-tests-framework

            - name: Install Requirements
              if: steps.retdec-fw-cache.outputs.cache-hit != 'true'
                    && matrix.os != 'windows-latest'
              run: |
                    . .venv/bin/activate
                    pip3 install wheel
                    pip3 install r2pipe
                    pip3 install -r requirements.txt
              working-directory: build/retdec-regression-tests-framework

            - name: Install Requirements on Windows
              if: steps.retdec-fw-cache.outputs.cache-hit != 'true'
                    && matrix.os == 'windows-latest'
              run: |
                    .venv\Scripts\activate
                    pip3 install wheel
                    pip3 install r2pipe
                    pip3 install -r requirements.txt
              working-directory: build/retdec-regression-tests-framework

    ## Build of the RetDec-R2plugin and bundled RetDec.
    ## After that runs tests.
    build-r2plugin:
        runs-on: ${{ matrix.os }}

        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                type: [Release, Debug]

            # Let other builds finish.
            fail-fast: false

        needs: [prepare-radare2]

        steps:
            - uses: actions/checkout@v2

            - name: Create Build Directory
              run: mkdir -p build/r2plugin

            - name: Extract Radare2 Installation
              id: radare2-cache
              uses: actions/cache@v1
              env:
                  cache-name: radare2-chb
              with:
                  path: build/radare2
                  key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/radare2.version') }}

            - name: Install Missing Packages on macOS
              if: matrix.os == 'macos-latest'
              run: brew install pkg-config autoconf automake libtool

              # Qt is needed for the Cutter Plugin
            - name: Install Qt5 on Ubuntu
              if: matrix.os == 'ubuntu-latest'
              run: sudo apt install qt5-default

            - name: Install Qt5 on macOS
              if: matrix.os == 'macos-latest'
              run: brew install qt5

            - name: Build CMake
              if: steps.r2plugin-cache.cache-hit != 'true' && matrix.os != 'windows-latest'
              run: |
                    # Next line is only for macOS
                    export PATH=/usr/local/opt/qt/bin:${PATH}
                    export PATH=${PWD}/../radare2/bin:${PATH}
                    export LD_LIBRARY_PATH=${PWD}/../radare2/lib:${PWD}/../radare2/lib64:${LD_LIBRARY_PATH}
                    export PKG_CONFIG_PATH=${PWD}/../radare2/lib/pkgconfig:${PKG_CONFIG_PATH}
                    cmake ../.. \
                        -DCMAKE_INSTALL_PREFIX=${HOME}/.local \
                        -DBUILD_BUNDLED_RETDEC=ON \
                        -DBUILD_CUTTER_PLUGIN=ON \
                        -DCMAKE_BUILD_TYPE=${{ matrix.type }} \
                        -DRETDEC_INSTALL_PREFIX=install \
                        -DCMAKE_LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/
              working-directory: build/r2plugin

            - name: Build CMake on Windows
              if: steps.r2plugin-cache.cache-hit != 'true' && matrix.os == 'windows-latest'
              run: |
                    cmake ..\.. `
                        -DCMAKE_INSTALL_PREFIX="$HOME/.local" `
                        -DBUILD_BUNDLED_RETDEC=ON `
                        -DBUILD_CUTTER_PLUGIN=OFF `
                        -DCMAKE_BUILD_TYPE=release `
                        -DRETDEC_INSTALL_PREFIX=install `
                        -DRADARE_INSTALL_PATH="..\radare2"
              working-directory: build/r2plugin

            - name: Build Step Make on Ubuntu
              if: matrix.os == 'ubuntu-latest'
              run: make -j$(nproc) install
              working-directory: build/r2plugin

            - name: Build Step Make on macOS
              if: matrix.os == 'macos-latest'
              run: make -j $(sysctl -n hw.ncpu) install
              working-directory: build/r2plugin

            - name: Build Step Make on Windows
              if: matrix.os == 'windows-latest'
              run: cmake --build . --config Release --target install -- -m
              working-directory: build/r2plugin

            - name: Prepare Ubuntu
              if: matrix.os == 'ubuntu-latest'
              run: |
                    sudo apt-get update
                    sudo apt-get install gcc-multilib # Install x86 binaries support on Ubuntu
                    wget --no-proxy https://releases.llvm.org/3.9.1/clang+llvm-3.9.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz -O llvm.tar.xz
              working-directory: build

            - name: Prepare macOS
              if: matrix.os == 'macos-latest'
              run: wget --no-proxy https://releases.llvm.org/3.9.0/clang+llvm-3.9.0-x86_64-apple-darwin.tar.xz -O llvm.tar.xz
              working-directory: build

            - name: Prepare Windows
              if: matrix.os == 'windows-latest'
              run: curl https://releases.llvm.org/3.9.1/LLVM-3.9.1-win64.exe -o llvm.exe
              shell: cmd
              working-directory: build

            - name: Prepare Windows
              if: matrix.os == 'windows-latest'
              run: |
                  C:\msys64\usr\bin\pacman -S mingw-w64-i686-gcc --noconfirm
                  C:\msys64\usr\bin\pacman -S mingw-w64-x86_64-gcc --noconfirm
                  choco install 7zip

            - name: Extract Clang
              if: matrix.os != 'windows-latest'
              run: tar -xJf llvm.tar.xz && mv clang* clang
              working-directory: build

            - name: Extract Clang on Windows
              if: matrix.os == 'windows-latest'
              run: |
                    mkdir clang
                    cd clang
                    7z x ..\llvm.exe
              working-directory: build

              # Qt is needed for the Cutter Plugin
            - name: Install Qt5 on Ubuntu
              if: matrix.os == 'ubuntu-latest'
              run: sudo apt install qt5-default

            - name: Install Qt5 on macOS
              if: matrix.os == 'macos-latest'
              run: brew install qt5

            - name: Verify Installation of R2plugin
              if: matrix.os != 'windows-latest'
              run: ls ${HOME}/.local/share/radare2/plugins/core_retdec.so || ls ${HOME}/.local/share/radare2/plugins/core_retdec.dylib

            # Prepare files for publishing, resulting structure:
            #   RetDec-R2Plugin-OS-Type
            #   |_ bin
            #   |  \_ retdec-*
            #   |
            #   |_ share
            #   |  \__ retdec/support/*.ord
            #   |   \_ radare2/plugins/core_retdec.so
            #   |
            #   |_ CHANGELOG.md
            #   |_ LICENSE
            #   |_ LICENSE-THIRD-PARTY
            #   \_ README.md
            - name: Prepare Files for Publishing
              if: matrix.type == 'Release'
              run: |
                    mkdir -p build/r2plugin/install
                    cp -r ~/.local/bin build/r2plugin/install/
                    cp -r ~/.local/share build/r2plugin/install/
                    cp LICENSE* build/r2plugin/install/
                    cp CHANGELOG.md build/r2plugin/install/
                    cp README.md build/r2plugin/install/

            - name: Archive Artifacts
              if: matrix.type == 'Release'
              uses: actions/upload-artifact@v1
              with:
                  name: RetDec-R2Plugin-Build-${{ runner.os }}
                  path: build/r2plugin/install

            - name: Clone RetDec for Tests
              run: git clone https://github.com/avast/retdec
              working-directory: build

            - name: Clone RetDec RT Framework
              run: git clone https://github.com/avast/retdec-regression-tests-framework
              working-directory: build

            - name: Clone RetDec RT
              run: git clone https://github.com/avast/retdec-regression-tests
              working-directory: build

            - name: Extract RetDec RT Framework Cache
              id: retdec-fw-cache
              uses: actions/cache@v1
              env:
                  cache-name: retdec-test-fw-cache
              with:
                  path: build/retdec-regression-tests-framework/.venv
                  key: ${{ runner.os }}-${{ env.cache-name }}

            - name: Prepare Test settings
              if: matrix.os != 'windows-latest'
              run: |
                    cat <<EOF > ${PWD}/build/retdec-regression-tests-framework/config_local.ini
                    [runner]
                    ; Path to the extracted Clang package containing subdirectories such as bin, include, lib, share.
                    clang_dir = ${PWD}/build/clang
                    ; Path to the cloned repository containing regression tests.
                    tests_root_dir = ${PWD}/build/retdec-regression-tests
                    ; Path to the RetDec's build directory.
                    retdec_build_dir = ${PWD}/build/r2plugin/_deps/retdec-build
                    ; Path to the RetDec's installation directory.
                    retdec_install_dir = ${HOME}/.local
                    ; Path to the cloned RetDec repository.
                    retdec_repo_dir = ${PWD}/build/retdec
                    r2plugin_tests_enabled = 1
                    r2plugin_script = ${PWD}/scripts/run-r2-decompilation.py
                    EOF

            - name: Prepare Test settings on Windows
              if: matrix.os == 'windows-latest'
              run: |
                    $PWD = (Get-Location).path
                    echo "[runner]
                    ; Path to the extracted Clang package containing subdirectories such as bin, include, lib, share.
                    clang_dir = $PWD\build\clang
                    ; Path to the cloned repository containing regression tests.
                    tests_root_dir = $PWD\build\retdec-regression-tests
                    ; Path to the RetDec's build directory.
                    retdec_build_dir = $PWD\build\r2plugin\_deps\retdec-build
                    ; Path to the RetDec's installation directory.
                    retdec_install_dir = $HOME\.local
                    ; Path to the cloned RetDec repository.
                    retdec_repo_dir = $PWD\build\retdec
                    r2plugin_tests_enabled = 1
                    r2plugin_script = $PWD\scripts\run-r2-decompilation.py" `
                        > "$($(Get-Location).path)\build\retdec-regression-tests-framework\config_local.ini"

            - name: Verify configuration on Windows
              if: matrix.os == 'windows-latest'
              run: |
                    cat "$($(Get-Location).path)\build\retdec-regression-tests-framework\config_local.ini"
                    ls build
                    ls build/clang

            - name: Run tests
              if: matrix.os != 'windows-latest'
              run: |
                    . .venv/bin/activate
                    export PATH=${PWD}/../radare2/bin:${PATH}
                    export LD_LIBRARY_PATH=${PWD}/../radare2/lib:${PWD}/../radare2/lib64:${LD_LIBRARY_PATH}
                    export PKG_CONFIG_PATH=${PWD}/../radare2/lib/pkgconfig:${PKG_CONFIG_PATH}
                    python3 ./runner.py tools.r2plugin
              working-directory: build/retdec-regression-tests-framework

              # Tests on Windows are turned off.
              # This is caused by radare2.exe not giving output/giving output of r2p.
              # When this error is resolved removing `false` should result in
              # tests being enabled.
            - name: Run tests on Windows
              if: false && matrix.os == 'windows-latest'
              run: |
                    $nixPath = ((($(Get-Location).path -replace "\\","/") -replace "C:","/c") -replace "D:","/d")
                    C:\msys64\usr\bin\bash.exe -l -c "
                    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
                    python get-pip.py
                    python -m pip install wheel
                    python -m pip install r2pipe
                    python -m pip install -r $nixPath/requirements.txt
                    export PATH=`"$nixPath/../radare2/bin:`$PATH`"
                    python $nixPath/runner.py tools.r2plugin
                    "
              working-directory: build/retdec-regression-tests-framework
